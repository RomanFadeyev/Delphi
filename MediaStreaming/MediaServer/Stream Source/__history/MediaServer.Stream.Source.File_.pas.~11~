{***********************************<_INFO>************************************}
{  <Проект>      Медиа-сервер                                                  }
{                                                                              }
{  <Область>     16:Медиа-контроль                                             }
{                                                                              }
{  <Задача>      Медиа-источник, предоставляющий чтение данных из файла        }
{                                                                              }
{  <Автор>       Фадеев Р.В.                                                   }
{                                                                              }
{  <Дата>        14.01.2011                                                    }
{                                                                              }
{  <Примечание>  Нет примечаний.                                               }
{                                                                              }
{  <Атрибуты>    ООО НПП "Спецстрой-Связь", ООО "Трисофт"                      }
{                                                                              }
{***********************************</_INFO>***********************************}
unit MediaServer.Stream.Source.File_;

interface
  uses Windows, SysUtils, Classes, SyncObjs,uBaseClasses,
  MediaServer.Stream.Source,
  MediaProcessing.Definitions,MediaStream.Framer, MediaStream.DataSource.File_;

type
  TMediaServerSourceFile = class;
  TFileFinishedEvent = procedure (Sender: TMediaServerSourceFile; const aFileName: string) of object;

  //Класс, выполняющий непосредственно получение данных (видеопотока)
  TMediaServerSourceFile = class (TMediaServerSourceBasedOnMediaStream)
  private
    FFileReadThread : TThreadObjectVar<TThread>;
    FFileName: string;
    FTransmitAudio : boolean;
    FFramerClass: TStreamFramerClass;
    FOnFileFinished: TFileFinishedEvent;
  public
    constructor Create(const aFileName: string;
                       aTransmitAudio: boolean //Записывать ли аудио
                      ); overload;

    destructor Destroy; override;


    function Name: string; override;
    function DeviceType: string; override;
    function ConnectionString: string; override;

    function PtzSupported: boolean; override;


    //property OnFileFinished: TFileFinishedEvent read FOnFileFinished write FOnFileFinished;
    //property Framer: TStreamFramer read FFramer;
  end;

implementation
  uses Math,Forms,ThreadNames, VFW, MediaServer.Workspace, uTrace,
       MediaStream.FramerFactory,MediaStream.UrlFormats;

{ TMediaServerSourceFile }

constructor TMediaServerSourceFile.Create(const aFileName: string;aTransmitAudio: boolean);
var
  aParams: TMediaStreamDataSourceConnectParams_File;
begin
  aParams:=TMediaStreamDataSourceConnectParams_File.Create(aFileName,true,aTransmitAudio);
  inherited Create(aParams, TMediaStreamDataSource_File, aTransmitAudio, -1);

  FFileName:=aFileName;
  FTransmitAudio:=aTransmitAudio;
end;

destructor TMediaServerSourceFile.Destroy;
begin
  inherited;
  FreeAndNil(FFileReadThread);
end;

function TMediaServerSourceFile.DeviceType: string;
begin
  result:='Файл';
end;

function TMediaServerSourceFile.Name: string;
begin
  result:=FFileName;
end;

procedure TMediaServerSourceFile.OnFrameReceived(
                                  const aFormat: TMediaStreamDataHeader;
                                  aData: pointer; aDataSize:cardinal;
                                  aInfo: pointer; aInfoSize: cardinal);
begin
  //Если не нужно записывать аудио данные, то выходим
  if not FTransmitAudio and (aFormat.biMediaType=mtAudio) then
    exit;

  //Выносим за Lock потому что все операнды - локальные переменные
  DoDataReceived(aFormat, aData,aDataSize, aInfo,aInfoSize);
end;

procedure TMediaServerSourceFile.Open(aSync: boolean);
begin
  if Opened then
    exit;

  Close;

  try
    FFileReadThread.Value:=TReadFileThread.Create(FFileName,FFramerClass,self);
    try
      DoConnectionOK;
    except
       //?????
    end;
  except
    on E:Exception do
      DoConnectionFailed(E);
  end;
end;

procedure TMediaServerSourceFile.DoClose;
begin
  FFileReadThread.FreeValue;
end;

function TMediaServerSourceFile.ConnectionString: string;
begin
  result:=MakeFileUrl(FFileName);
end;

function TMediaServerSourceFile.Opened: Boolean;
begin
  result:=FFileReadThread.Value<>nil;
end;

function TMediaServerSourceFile.StreamInfo: TBytes;
begin
  FFileReadThread.Lock;
  try
    CheckConnected;
    result:=GetReadThread(FFileReadThread).StreamInfo;
  finally
    FFileReadThread.Unlock;
  end;
end;

function TMediaServerSourceFile.GetStreamType(aMediaType: TMediaType): TStreamType;
begin
  FFileReadThread.Lock;
  try
    if Opened then
    begin
      if aMediaType=mtVideo then
        result:=GetReadThread(FFileReadThread).FReader.VideoStreamType
      else if aMediaType=mtAudio then
        result:=GetReadThread(FFileReadThread).FReader.AudioStreamType
      else
        result:=0;
    end
    else begin
      with FFramerClass.Create do
      begin
        if aMediaType=mtVideo then
          result:=VideoStreamType
        else if aMediaType=mtAudio then
          result:=AudioStreamType
        else
          result:=0;
        Free;
      end;
    end;
  finally
    FFileReadThread.Unlock;
  end;
end;

function TMediaServerSourceFile.PtzSupported: boolean;
begin
  result:=false;
end;

procedure TMediaServerSourceFile.WaitWhileConnecting(aTimeout: integer);
begin
  inherited;
end;

{ TFileReader }

constructor TFileReader.Create(const aFileName: string;
  aFramerClass: TStreamFramerClass);
begin
  FStream:=TFileStream.Create(aFileName,fmOpenRead or fmShareDenyNone);
  FFramer:=aFramerClass.Create;

  //Эта команда нужна:
  // 1. она позволяет нам получить формат файла
  // 2. она позволяет нам убедиться, что поток валидного формата

  FFramer.OpenStream(FStream);
end;

destructor TFileReader.Destroy;
begin
  FreeAndNil(FFramer);
  FreeAndNil(FStream);
  inherited;
end;

function TFileReader.GetNextFrame(
  out aOutFormat: TMediaStreamDataHeader;
  out aOutData: pointer; out aOutDataSize: cardinal;
  out aOutInfo: pointer;
  out aOutInfoSize: cardinal): boolean;
begin
  result:=FFramer.GetNextFrame(aOutFormat,aOutData,aOutDataSize,aOutInfo,aOutInfoSize);
end;

procedure TFileReader.Reset;
begin
  FStream.Position:=0;
  FFramer.OpenStream(FStream); //Каждый раз заново открываем, потому что нужно сбросить позицию в потоке
end;

function TFileReader.StreamInfo: TBytes;
begin
  result:=FFramer.StreamInfo;
end;

function TFileReader.VideoStreamType: TStreamType;
begin
  result:=FFramer.VideoStreamType;
end;

function TFileReader.AudioStreamType: TStreamType;
begin
  result:=FFramer.AudioStreamType;
end;


end.

